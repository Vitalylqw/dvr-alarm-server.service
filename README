# Camera and Telegram Bot Processor## Описание проекта

Этот проект предназначен для обработки изображений с камер наблюдения, детекции объектов на них и отправки уведомлений через Telegram. Он также включает возможность отправки тревожных сигналов по HTTP-запросам и управление камерами через Telegram-бота.

### Основные компоненты:1.**CameraProcessor** — отвечает за взаимодействие с ONVIF камерами, захват изображений и их обработку с использованием моделей YOLO.
2.**TelegramBotProcessor** — управляет Telegram-ботом, обрабатывает команды от пользователей и отправляет уведомления при обнаружении объектов на камерах.
3.**AlarmProcessor** — отвечает за отправку тревожных уведомлений через HTTP-запросы.
4.**Main** — основной управляющий скрипт, который запускает все процессы и следит за их работой.

## Установка и настройка### Зависимости

Для работы проекта требуются следующие библиотеки:

-`opencv-python`-`numpy`-`multiprocessing`-`onvif`-`urllib`-`ultralytics`-`telebot`-`aiohttp`-`python-dotenv`

Вы можете установить все зависимости с помощью pip:

```bash
pip install -r requirements.txt

Конфигурация
Перед запуском убедитесь, что у вас настроены следующие переменные окружения:

TELEGRAM_BOT_TOKEN — токен вашего Telegram-бота.
CHAT_ID — ID чата в Telegram, куда будут отправляться уведомления.
CAMERA_IPS — список IP-адресов камер для мониторинга.
Другие переменные, такие как пользователь и пароль для камер, можно передать через параметры при инициализации.
Создайте файл .env в корневой директории проекта с содержимым:
TELEGRAM_BOT_TOKEN=ваш_телеграм_бот_токен
CHAT_ID=ваш_чат_id
CAMERA_IPS=[
{"ip": 10, "user": "admin", "passw": "12345", "alarm_url": "http://example.com/alarm", "area": [100, 100, 200, 200], "track": True},
{"ip": 11, "user": "admin", "passw": "12345", "alarm_url": "http://example.com/alarm", "area": [100, 100, 200, 200], "track": True},
]

Запуск проекта
Запустите основной файл проекта:

python main.py
Структура файлов
camera_processor.py — класс для обработки видео с камер наблюдения, детекция объектов с использованием YOLO и отправка уведомлений о событиях.
telegram_processor.py — класс для обработки команд Telegram-бота и отправки уведомлений в чат.
alarm_processor.py — класс для отправки тревожных сигналов по HTTP-запросам при обнаружении объектов на видео.
main.py — основной файл, который запускает все процессы, взаимодействует с камерами, телеграм-ботом и тревожными сигналами.
Логирование
Все события в системе логируются в папку logs, где для каждого компонента создается отдельный лог-файл. Логирование осуществляется с помощью библиотеки logging с использованием ротации логов для ограничения их объема.

Управление через Telegram
Telegram-бот поддерживает следующие команды:

/now <IP> — запросить текущее изображение с камеры.
/start_cam <IP> — запуск отслеживания камеры с указанным IP.
/stop_cam <IP> — остановка отслеживания камеры.
/start — возобновить отправку сообщений.
/stop — остановить отправку сообщений.
/exit — остановить бота и завершить все процессы.

### Пояснение:-**Описание**: Введение в проект и его основные компоненты.
-**Установка**: Инструкции по установке необходимых библиотек и настройке переменных окружения.
-**Запуск**: Описание команд для запуска и работы проекта.
-**Логирование**: Краткое описание системы логирования.
-**Telegram команды**: Список поддерживаемых команд для взаимодействия с камерами через бота.
